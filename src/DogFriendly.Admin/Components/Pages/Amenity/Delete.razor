@page "/amenity/delete"
@using DogFriendly.Domain.Entitites
@using Microsoft.EntityFrameworkCore
@using Microsoft.AspNetCore.Authorization
@attribute [Authorize(Roles = "Admin")]
@inject DogFriendly.Infrastructure.Context.DogFriendlyContext DB
@inject NavigationManager NavigationManager

<PageTitle>Suppression d'un équipement</PageTitle>

<h1>Suppression</h1>

<h3>Etes-vous sur de vouloir supprimer cet équipement ?</h3>
<div>
    <h4>Equipement</h4>
    <hr />
    @if (amenityentity is null)
    {
        <p><em>Chargement de l'équipement ...</em></p>
    }
    else
    {
        <dl class="row">
            <dt class="col-sm-2">Icone</dt>
            <dd class="col-sm-10">@amenityentity.IconUri</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">Nom</dt>
            <dd class="col-sm-10">@amenityentity.Name</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">Créé le</dt>
            <dd class="col-sm-10">@amenityentity.CreatedAt</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">Créé par</dt>
            <dd class="col-sm-10">@amenityentity.CreatedBy</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">Modifié le</dt>
            <dd class="col-sm-10">@amenityentity.UpdatedAt</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">Modifié par</dt>
            <dd class="col-sm-10">@amenityentity.UpdatedBy</dd>
        </dl>
        <EditForm method="post" Model="amenityentity" OnValidSubmit="DeleteAmenityEntity" FormName="delete" Enhance>
            <button type="submit" class="btn btn-danger" disabled="@(amenityentity is null)">Supprimer</button> |
            <a href="/amenities">Liste des équipements</a>
        </EditForm>
    }
</div>

@code {
    AmenityEntity? amenityentity;

    [SupplyParameterFromQuery]
    public int Id { get; set; }

    protected override async Task OnInitializedAsync()
    {
        amenityentity = await DB.Amenities.FirstOrDefaultAsync(m => m.Id == Id);

        if (amenityentity is null)
        {
            NavigationManager.NavigateTo("/amenities");
        }
    }

    public async Task DeleteAmenityEntity()
    {
        var placeAmenities = await DB.PlaceAmenities
            .Where(p => p.AmenityId == amenityentity.Id)
            .ToListAsync();
        if (placeAmenities.Count > 0)
        {
            DB.PlaceAmenities.RemoveRange(placeAmenities);
        }
        DB.Amenities.Remove(amenityentity!);
        await DB.SaveChangesAsync();
        NavigationManager.NavigateTo("/amenities");
    }
}
