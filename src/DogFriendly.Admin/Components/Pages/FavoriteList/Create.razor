@page "/favoritelist/create"
@using DogFriendly.Admin.Services
@using DogFriendly.Domain.Entitites
@using System.Security.Claims
@using Microsoft.AspNetCore.Authorization
@using Microsoft.EntityFrameworkCore
@attribute [Authorize(Roles = "Admin")]
@inject DogFriendly.Infrastructure.Context.DogFriendlyContext DB
@inject NavigationManager NavigationManager
@inject AuthenticationService Authentication
@inject IJSRuntime JSRuntime

<PageTitle>Création d'une liste de favoris</PageTitle>

<NavBar Title="Création d'une liste de favoris" />
<div class="content">
    <div class="row">
        <div class="col-md-12">
            <div class="card">
                <div class="card-body">
                    <EditForm method="post" Model="FavoriteListEntity" OnValidSubmit="AddFavoriteListEntity" FormName="create" Enhance>
                        <DataAnnotationsValidator />
                        <ValidationSummary class="text-danger" />
                        <div class="mb-3">
                            <label for="name" class="form-label">Nom :</label>
                            <InputText id="name" @bind-Value="FavoriteListEntity.Name" class="form-control" />
                            <ValidationMessage For="() => FavoriteListEntity.Name" class="text-danger" />
                        </div>
                        <div class="mb-3">
                            <label for="comment" class="form-label">Commentaire :</label>
                            <InputText id="comment" @bind-Value="FavoriteListEntity.Comment" class="form-control" />
                            <ValidationMessage For="() => FavoriteListEntity.Comment" class="text-danger" />
                        </div>
                        <div class="mb-3">
                            <label for="userid" class="form-label">Utilisateur :</label>
                            <InputSelect id="userid" @bind-Value="FavoriteListEntity.UserId">
                                <option value="0">Sélectionner un utilisateur</option>
                                @foreach (var type in Users)
                                {
                                    <option value="@type.Id">
                                        @type.Name
                                    </option>
                                }
                            </InputSelect>
                        </div>
                        <div class="mb-3">
                            <label for="places" class="form-label">Lieux :</label>
                            <select id="places" multiple>
                                @foreach (var type in Places)
                                {
                                    <option value="@type.Id">
                                        @type.Name
                                    </option>
                                }
                            </select>
                        </div>
                        <button type="submit" class="btn btn-primary">Enregistrer</button>
                    </EditForm>
                </div>
                <div class="card-header">
                    <p class="card-category">
                        <a href="/favoritelist">Liste des favoris</a>
                    </p>
                </div>
            </div>
        </div>
    </div>
</div>

@code 
{
    /// <summary>
    /// Entity of favorite list.
    /// </summary>
    [SupplyParameterFromForm]
    public FavoriteListEntity FavoriteListEntity { get; set; }

    protected List<PlaceEntity> Places { get; set; } = new List<PlaceEntity>();
    protected List<int> PlacesIds { get; set; } = new List<int>();
    protected List<UserEntity> Users { get; set; } = new List<UserEntity>();

    /// <summary>
    /// On change event for places.
    /// </summary>
    /// <param name="placesIds">List of places.</param>
    [JSInvokable]
    public void OnPlacesChange(List<int> placesIds)
    {
        PlacesIds = placesIds;
    }

    /// <summary>
    /// Initialize the component.
    /// </summary>
    /// <returns></returns>
    protected override async Task OnInitializedAsync()
    {
        FavoriteListEntity = new FavoriteListEntity
            {
                Name = "",
                CreatedAt = DateTimeOffset.UtcNow,
                CreatedBy = Authentication?.Identity?.FindFirst(ClaimTypes.Email)?.Value,
            };
        Places = await DB.Places
            .OrderBy(p => p.Name)
            .Select(p => new PlaceEntity
                {
                    Id = p.Id,
                    Name = p.Name,
                    Address = string.Empty,
                    City = string.Empty,
                    PostalCode = string.Empty,
                    Country = string.Empty,
                    Description = string.Empty,
                    CreatedBy = string.Empty
                })
            .ToListAsync();
        Users = await DB.Users
            .OrderBy(p => p.Name)
            .Select(p => new UserEntity
                {
                    Id = p.Id,
                    Name = p.Name,
                    Email = string.Empty,
                    CreatedBy = string.Empty
                })
            .ToListAsync();
    }

    /// <inheritdoc />
    protected override Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            DotNetObjectReference<Create> objRef = DotNetObjectReference.Create(this);
            JSRuntime.InvokeVoidAsync("initSelect", objRef);
        }

        return base.OnAfterRenderAsync(firstRender);
    }

    /// <summary>
    /// Add favorite list entity.
    /// </summary>
    /// <returns></returns>
    protected async Task AddFavoriteListEntity()
    {
        DB.Favorites.Add(FavoriteListEntity);
        await DB.SaveChangesAsync();

        if (PlacesIds.Count > 0)
        {
            FavoriteListEntity.PlaceFavorites = PlacesIds
                .Select(id => new PlaceFavoriteEntity
                    {
                        FavoriteList = FavoriteListEntity,
                        PlaceId = id
                    })
                .ToList();
            await DB.PlaceFavorites.AddRangeAsync(FavoriteListEntity.PlaceFavorites);
            await DB.SaveChangesAsync();
        }

        NavigationManager.NavigateTo("/favoritelist");
    }

    /// <summary>
    /// On user change event.
    /// </summary>
    /// <param name="value"></param>
    [JSInvokable]
    public void OnUserChange(int value)
    {
        FavoriteListEntity.UserId = value;
    }
}
