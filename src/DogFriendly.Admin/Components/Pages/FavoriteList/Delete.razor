@page "/favoritelist/delete"
@using DogFriendly.Domain.Entitites
@using Microsoft.EntityFrameworkCore
@using Microsoft.AspNetCore.Authorization
@attribute [Authorize(Roles = "Admin")]
@inject DogFriendly.Infrastructure.Context.DogFriendlyContext DB
@inject NavigationManager NavigationManager

<PageTitle>Suppresion d'une liste de favoris</PageTitle>

<h1>Suppression</h1>

<h3>Etes-vous sur de vouloir supprimer la liste ?</h3>
<div>
    <h4>Liste de favoris</h4>
    <hr />
    @if (favoritelistentity is null)
    {
        <p><em>Chargement de la liste ...</em></p>
    }
    else {
        <dl class="row">
            <dt class="col-sm-2">Commentaire</dt>
            <dd class="col-sm-10">@favoritelistentity.Comment</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">Nom</dt>
            <dd class="col-sm-10">@favoritelistentity.Name</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">Identifiant de l'utilisateur</dt>
            <dd class="col-sm-10">@favoritelistentity.UserId</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">Créé le</dt>
            <dd class="col-sm-10">@favoritelistentity.CreatedAt</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">Créé par</dt>
            <dd class="col-sm-10">@favoritelistentity.CreatedBy</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">Modifié le</dt>
            <dd class="col-sm-10">@favoritelistentity.UpdatedAt</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">Modifié par</dt>
            <dd class="col-sm-10">@favoritelistentity.UpdatedBy</dd>
        </dl>
        <EditForm method="post" Model="favoritelistentity" OnValidSubmit="DeleteFavoriteListEntity" FormName="delete" Enhance>
            <button type="submit" class="btn btn-danger" disabled="@(favoritelistentity is null)">Supprimer</button> |
            <a href="/favoritelist">Liste des favoris</a>
        </EditForm>
    }
</div>

@code {
    FavoriteListEntity? favoritelistentity;

    [SupplyParameterFromQuery]
    public int Id { get; set; }

    protected override async Task OnInitializedAsync()
    {
        favoritelistentity = await DB.Favorites.FirstOrDefaultAsync(m => m.Id == Id);

        if (favoritelistentity is null)
        {
            NavigationManager.NavigateTo("/favoritelist");
        }
    }

    public async Task DeleteFavoriteListEntity()
    {
        DB.Favorites.Remove(favoritelistentity!);
        await DB.SaveChangesAsync();
        NavigationManager.NavigateTo("/favoritelist");
    }
}
