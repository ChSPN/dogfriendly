@page "/favoritelist/edit"
@using DogFriendly.Admin.Services
@using DogFriendly.Domain.Entitites
@using Microsoft.EntityFrameworkCore
@using System.Security.Claims
@using Microsoft.AspNetCore.Authorization
@attribute [Authorize(Roles = "Admin")]
@inject DogFriendly.Infrastructure.Context.DogFriendlyContext DB
@inject NavigationManager NavigationManager
@inject AuthenticationService Authentication
@inject IJSRuntime JSRuntime

<PageTitle>Modifier la liste de favoris</PageTitle>

<NavBar Title="Modifier la liste de favoris" />
<div class="content">
    <div class="row">
        <div class="col-md-12">
            <div class="card">
                <div class="card-body">
                    @if (FavoriteListEntity is null)
                    {
                        <p><em>Chargement ...</em></p>
                    }
                    else
                    {
                        <EditForm method="post" Model="FavoriteListEntity" OnValidSubmit="UpdateFavoriteListEntity" FormName="edit" Enhance>
                            <DataAnnotationsValidator />
                            <ValidationSummary />
                            <div class="mb-3">
                                <label for="name" class="form-label">Nom :</label>
                                <InputText id="name" @bind-Value="FavoriteListEntity.Name" class="form-control" />
                                <ValidationMessage For="() => FavoriteListEntity.Name" class="text-danger" />
                            </div>
                            <input type="hidden" name="FavoriteListEntity.Id" value="@FavoriteListEntity.Id" />
                            <div class="mb-3">
                                <label for="comment" class="form-label">Commentaire :</label>
                                <InputText id="comment" @bind-Value="FavoriteListEntity.Comment" class="form-control" />
                                <ValidationMessage For="() => FavoriteListEntity.Comment" class="text-danger" />
                            </div>
                            <div class="mb-3">
                                <label for="userid" class="form-label">Utilisateur :</label>
                                <InputSelect id="userid" @bind-Value="FavoriteListEntity.UserId">
                                    @foreach (var type in Users)
                                    {
                                        <option value="@type.Id">
                                            @type.Name
                                        </option>
                                    }
                                </InputSelect>
                            </div>
                            <div class="mb-3">
                                <label for="places" class="form-label">Lieux :</label>
                                <select id="places" multiple>
                                    @foreach (var type in Places)
                                    {
                                        if (FavoriteListEntity.PlaceFavorites?.Any(p => p.PlaceId == type.Id) == true)
                                        {
                                            <option selected value="@type.Id">
                                                @type.Name
                                            </option>
                                        }
                                        else
                                        {
                                            <option value="@type.Id">
                                                @type.Name
                                            </option>
                                        }
                                    }
                                </select>
                            </div>
                            <button type="submit" class="btn btn-primary">Enregistrer</button>
                        </EditForm>
                    }
                </div>
                <div class="card-header">
                    <p class="card-category">
                        <a href="/favoritelist">Liste des favoris</a>
                    </p>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    /// <summary>
    /// Id of the favorite list.
    /// </summary>
    [SupplyParameterFromQuery]
    public int Id { get; set; }

    /// <summary>
    /// Entity of the favorite list.
    /// </summary>
    [SupplyParameterFromForm]
    public FavoriteListEntity? FavoriteListEntity { get; set; }

    protected List<PlaceEntity> Places { get; set; } = new List<PlaceEntity>();
    protected List<int> PlacesIds { get; set; } = new List<int>();
    protected List<UserEntity> Users { get; set; } = new List<UserEntity>();

    /// <summary>
    /// On change event for places.
    /// </summary>
    /// <param name="placesIds">List of places.</param>
    [JSInvokable]
    public void OnPlacesChange(List<int> placesIds)
    {
        PlacesIds = placesIds;
    }

    /// <summary>
    /// Initialize the component.
    /// </summary>
    /// <returns></returns>
    protected override async Task OnInitializedAsync()
    {
        FavoriteListEntity ??= await DB.Favorites.FirstOrDefaultAsync(m => m.Id == Id);

        if (FavoriteListEntity is null)
        {
            NavigationManager.NavigateTo("/favoritelist");
        }
        else
        {
            Places = await DB.Places
                .OrderBy(p => p.Name)
                .Select(p => new PlaceEntity
                    {
                        Id = p.Id,
                        Name = p.Name,
                        Address = string.Empty,
                        City = string.Empty,
                        PostalCode = string.Empty,
                        Country = string.Empty,
                        Description = string.Empty,
                        CreatedBy = string.Empty
                    })
                .ToListAsync();
            Users = await DB.Users
                .OrderBy(p => p.Name)
                .Select(p => new UserEntity
                    {
                        Id = p.Id,
                        Name = p.Name,
                        Email = string.Empty,
                        CreatedBy = string.Empty
                    })
                .ToListAsync();
        }
    }

    /// <inheritdoc />
    protected override Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            DotNetObjectReference<Edit> objRef = DotNetObjectReference.Create(this);
            JSRuntime.InvokeVoidAsync("initSelect", objRef);
        }

        return base.OnAfterRenderAsync(firstRender);
    }

    /// <summary>
    /// Update the favorite list entity.
    /// </summary>
    /// <returns></returns>
    protected async Task UpdateFavoriteListEntity()
    {
        DB.Attach(FavoriteListEntity!).State = EntityState.Modified;

        try
        {
            FavoriteListEntity.UpdatedAt = DateTimeOffset.UtcNow;
            FavoriteListEntity.UpdatedBy = Authentication.Identity?.FindFirst(ClaimTypes.Email)?.Value;

            if (FavoriteListEntity.PlaceFavorites?.Count > 0)
            {
                var removing = FavoriteListEntity.PlaceFavorites
                    .Where(pa => !PlacesIds.Contains(pa.PlaceId))
                    .Select(pa =>
                    {
                        FavoriteListEntity.PlaceFavorites.Remove(pa);
                        return pa;
                    })
                    .ToList();
                if (removing.Count > 0)
                {
                    DB.PlaceFavorites.RemoveRange(removing);
                }

                if (PlacesIds.Count > 0)
                {
                    var adding = PlacesIds
                        .Where(id => !FavoriteListEntity.PlaceFavorites.Any(pa => pa.PlaceId == id))
                        .Select(id =>
                        {
                            var add = new PlaceFavoriteEntity
                                {
                                    PlaceId = id,
                                    FavoriteList = FavoriteListEntity
                                };
                            FavoriteListEntity.PlaceFavorites.Add(add);
                            return add;
                        })
                        .ToList();
                    if (adding.Count > 0)
                    {
                        await DB.PlaceFavorites.AddRangeAsync(adding);
                    }
                }
            }
            else if (PlacesIds.Count > 0)
            {
                FavoriteListEntity.PlaceFavorites = PlacesIds
                    .Select(id => new PlaceFavoriteEntity
                        {
                            PlaceId = id,
                            FavoriteList = FavoriteListEntity
                        })
                    .ToList();
                await DB.PlaceFavorites.AddRangeAsync(FavoriteListEntity.PlaceFavorites);
            }

            await DB.SaveChangesAsync();
        }
        catch (DbUpdateConcurrencyException)
        {
            if (!FavoriteListEntityExists(FavoriteListEntity!.Id))
            {
                NavigationManager.NavigateTo("/favoritelist");
            }
            else
            {
                throw;
            }
        }

        NavigationManager.NavigateTo("/favoritelist");
    }

    /// <summary>
    /// Exists favorite list entity.
    /// </summary>
    /// <param name="id">Id</param>
    /// <returns></returns>
    protected bool FavoriteListEntityExists(int id)
    {
        return DB.Favorites.Any(e => e.Id == id);
    }

    /// <summary>
    /// On user change event.
    /// </summary>
    /// <param name="value"></param>
    [JSInvokable]
    public void OnUserChange(int value)
    {
        FavoriteListEntity.UserId = value;
    }
}
