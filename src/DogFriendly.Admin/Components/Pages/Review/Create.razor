@page "/review/create"
@using DogFriendly.Admin.Services
@using DogFriendly.Domain.Entitites
@using Microsoft.AspNetCore.Authorization
@using System.Security.Claims
@using Microsoft.EntityFrameworkCore
@attribute [Authorize(Roles = "Admin")]
@inject DogFriendly.Infrastructure.Context.DogFriendlyContext DB
@inject NavigationManager NavigationManager
@inject AuthenticationService Authentication
@inject IJSRuntime JSRuntime

<PageTitle>Créer un avis</PageTitle>

<NavBar Title="Créer un avis" />
<div class="content">
    <div class="row">
        <div class="col-md-12">
            <div class="card">
                <div class="card-body">
                    <EditForm method="post" Model="ReviewEntity" OnValidSubmit="AddReviewEntity" FormName="create" Enhance>
                        <DataAnnotationsValidator />
                        <ValidationSummary class="text-danger" />
                        <div class="mb-3">
                            <label for="comment" class="form-label">Commentaire :</label>
                            <InputText id="comment" @bind-Value="ReviewEntity.Comment" class="form-control" />
                            <ValidationMessage For="() => ReviewEntity.Comment" class="text-danger" />
                        </div>
                        <div class="mb-3">
                            <label for="rating" class="form-label">Note :</label>
                            <InputNumber id="rating" @bind-Value="ReviewEntity.Rating" class="form-control" />
                            <ValidationMessage For="() => ReviewEntity.Rating" class="text-danger" />
                        </div>
                        <div class="mb-3">
                            <label for="placeid" class="form-label">Lieu :</label>
                            <InputSelect id="placeid" @bind-Value="ReviewEntity.PlaceId">
                                <option value="0">Sélectionner un lieu</option>
                                @foreach (var type in Places)
                                {
                                    <option value="@type.Id">
                                        @type.Name
                                    </option>
                                }
                            </InputSelect>
                        </div>
                        <div class="mb-3">
                            <label for="userid" class="form-label">Utilisateur :</label>
                            <InputSelect id="userid" @bind-Value="ReviewEntity.UserId">
                                <option value="0">Sélectionner un utilisateur</option>
                                @foreach (var type in Users)
                                {
                                    <option value="@type.Id">
                                        @type.Name
                                    </option>
                                }
                            </InputSelect>
                        </div>
                        <button type="submit" class="btn btn-primary">Enregistrer</button>
                    </EditForm>
                </div>
                <div class="card-header">
                    <p class="card-category">
                        <a href="/reviews">Liste des avis</a>
                    </p>
                </div>
            </div>
        </div>
    </div>
</div>

@code
{
    /// <summary>
    /// Entity to create.
    /// </summary>
    [SupplyParameterFromForm]
    public ReviewEntity ReviewEntity { get; set; }

    protected List<PlaceEntity> Places { get; set; } = new List<PlaceEntity>();
    protected List<UserEntity> Users { get; set; } = new List<UserEntity>();

    /// <inheritdoc />
    protected override async Task OnInitializedAsync()
    {
        ReviewEntity = new ReviewEntity
            {
                CreatedAt = DateTimeOffset.UtcNow,
                CreatedBy = Authentication?.Identity?.FindFirst(ClaimTypes.Email)?.Value,
            };
        Places = await DB.Places
            .OrderBy(p => p.Name)
            .Select(p => new PlaceEntity
                {
                    Id = p.Id,
                    Name = p.Name,
                    Address = string.Empty,
                    City = string.Empty,
                    PostalCode = string.Empty,
                    Country = string.Empty,
                    Description = string.Empty,
                    CreatedBy = string.Empty
                })
            .ToListAsync();
        Users = await DB.Users
            .OrderBy(p => p.Name)
            .Select(p => new UserEntity
                {
                    Id = p.Id,
                    Name = p.Name,
                    Email = string.Empty,
                    CreatedBy = string.Empty
                })
            .ToListAsync();
    }

    /// <inheritdoc />
    protected override Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            DotNetObjectReference<Create> objRef = DotNetObjectReference.Create(this);
            JSRuntime.InvokeVoidAsync("initSelect", objRef);
        }

        return base.OnAfterRenderAsync(firstRender);
    }

    /// <summary>
    /// Add the review entity.
    /// </summary>
    /// <returns></returns>
    protected async Task AddReviewEntity()
    {
        DB.Reviews.Add(ReviewEntity);
        await DB.SaveChangesAsync();
        NavigationManager.NavigateTo("/reviews");
    }

    /// <summary>
    /// On place change event.
    /// </summary>
    /// <param name="value">Value</param>
    [JSInvokable]
    public void OnPlaceChange(int value)
    {
        ReviewEntity.PlaceId = value;
    }

    /// <summary>
    /// On user change event.
    /// </summary>
    /// <param name="value"></param>
    [JSInvokable]
    public void OnUserChange(int value)
    {
        ReviewEntity.UserId = value;
    }
}
