@page "/place/edit"
@using DogFriendly.Admin.Services
@using DogFriendly.Domain.Entitites
@using Microsoft.EntityFrameworkCore
@using Microsoft.AspNetCore.Authorization
@using System.Security.Claims
@attribute [Authorize(Roles = "Admin")]
@inject DogFriendly.Infrastructure.Context.DogFriendlyContext DB
@inject NavigationManager NavigationManager
@inject AuthenticationService Authentication

<PageTitle>Modifier un lieu</PageTitle>

<h1>Modification</h1>

<h4>Lieu</h4>
<hr />
@if (PlaceEntity is null)
{
    <p><em>Chargement du lieu ...</em></p>
}
else
{
    <div class="row">
        <div class="col-md-4">
            <EditForm method="post" Model="PlaceEntity" OnValidSubmit="UpdatePlaceEntity" FormName="edit" Enhance>
                <DataAnnotationsValidator />
                <ValidationSummary />
                <input type="hidden" name="PlaceEntity.Id" value="@PlaceEntity.Id" />
                <div class="mb-3">
                    <label for="address" class="form-label">Adresse :</label>
                    <InputText id="address" @bind-Value="PlaceEntity.Address" class="form-control" />
                    <ValidationMessage For="() => PlaceEntity.Address" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="city" class="form-label">Ville :</label>
                    <InputText id="city" @bind-Value="PlaceEntity.City" class="form-control" />
                    <ValidationMessage For="() => PlaceEntity.City" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="country" class="form-label">Pays :</label>
                    <InputText id="country" @bind-Value="PlaceEntity.Country" class="form-control" />
                    <ValidationMessage For="() => PlaceEntity.Country" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="description" class="form-label">Description :</label>
                    <InputText id="description" @bind-Value="PlaceEntity.Description" class="form-control" />
                    <ValidationMessage For="() => PlaceEntity.Description" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="email" class="form-label">Email :</label>
                    <InputText id="email" @bind-Value="PlaceEntity.Email" class="form-control" />
                    <ValidationMessage For="() => PlaceEntity.Email" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="latitude" class="form-label">Latitude :</label>
                    <InputNumber id="latitude" @bind-Value="PlaceEntity.Latitude" class="form-control" />
                    <ValidationMessage For="() => PlaceEntity.Latitude" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="longitude" class="form-label">Longitude :</label>
                    <InputNumber id="longitude" @bind-Value="PlaceEntity.Longitude" class="form-control" />
                    <ValidationMessage For="() => PlaceEntity.Longitude" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="name" class="form-label">Nom :</label>
                    <InputText id="name" @bind-Value="PlaceEntity.Name" class="form-control" />
                    <ValidationMessage For="() => PlaceEntity.Name" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="openinghours" class="form-label">Horaires :</label>
                    <InputText id="openinghours" @bind-Value="PlaceEntity.OpeningHours" class="form-control" />
                    <ValidationMessage For="() => PlaceEntity.OpeningHours" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="phone" class="form-label">Téléphone :</label>
                    <InputText id="phone" @bind-Value="PlaceEntity.Phone" class="form-control" />
                    <ValidationMessage For="() => PlaceEntity.Phone" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="placetypeid" class="form-label">Identifiant du type de lieu:</label>
                    <InputNumber id="placetypeid" @bind-Value="PlaceEntity.PlaceTypeId" class="form-control" />
                    <ValidationMessage For="() => PlaceEntity.PlaceTypeId" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="postalcode" class="form-label">Code postal :</label>
                    <InputText id="postalcode" @bind-Value="PlaceEntity.PostalCode" class="form-control" />
                    <ValidationMessage For="() => PlaceEntity.PostalCode" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="website" class="form-label">Site web :</label>
                    <InputText id="website" @bind-Value="PlaceEntity.Website" class="form-control" />
                    <ValidationMessage For="() => PlaceEntity.Website" class="text-danger" />
                </div>
                <button type="submit" class="btn btn-primary">Enregistrer</button>
            </EditForm>
        </div>
    </div>
}

<div>
    <a href="/places">Liste des lieux</a>
</div>

@code {
    [SupplyParameterFromQuery]
    public int Id { get; set; }

    [SupplyParameterFromForm]
    public PlaceEntity? PlaceEntity { get; set; }

    protected override async Task OnInitializedAsync()
    {
        PlaceEntity ??= await DB.Places.FirstOrDefaultAsync(m => m.Id == Id);

        if (PlaceEntity is null)
        {
            NavigationManager.NavigateTo("/places");
        }
    }

    public async Task UpdatePlaceEntity()
    {
        DB.Attach(PlaceEntity!).State = EntityState.Modified;

        try
        {
            PlaceEntity.UpdatedAt = DateTimeOffset.UtcNow;
            PlaceEntity.UpdatedBy = Authentication.Identity?.FindFirst(ClaimTypes.Email)?.Value;
            await DB.SaveChangesAsync();
        }
        catch (DbUpdateConcurrencyException)
        {
            if (!PlaceEntityExists(PlaceEntity!.Id))
            {
                NavigationManager.NavigateTo("/places");
            }
            else
            {
                throw;
            }
        }

        NavigationManager.NavigateTo("/places");
    }

    bool PlaceEntityExists(int id)
    {
        return DB.Places.Any(e => e.Id == id);
    }
}
